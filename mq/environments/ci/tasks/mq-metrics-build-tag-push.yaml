apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mq-metrics-build-tag-push
  annotations:
    description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/description: Executes logic to build, tag and push a container image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 2.6.13
spec:
  params:
    - name: git-url
    - name: git-revision
      default: master
    - name: source-dir
      default: /source
    - name: image-server
      default: ""
    - name: image-namespace
      default: ""
    - name: image-repository
      default: ""
    - name: image-tag
      default: ""
    - name: BUILDER_IMAGE
      default: quay.io/buildah/stable:v1.15.0
    - name: DOCKERFILE
      default: ./Dockerfile
    - name: CONTEXT
      default: .
    - name: TLSVERIFY
      default: "false"
    - name: FORMAT
      default: "docker"
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: overlay
  volumes:
    - name: varlibcontainers
      emptyDir: {}
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: build
      image: $(params.BUILDER_IMAGE)
      workingDir: $(params.source-dir)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
        - name: IBM_ENTITLED_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_USER
              optional: true
        - name: IBM_ENTITLED_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibm-entitled-registry-credentials
              key: IBM_ENTITLED_REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        privileged: true
      script: |
        # APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
        # if [[ -n "${IBM_ENTITLED_REGISTRY_USER}" ]] && [[ -n "${IBM_ENTITLED_REGISTRY_PASSWORD}" ]]; then
        #   buildah login -u ${IBM_ENTITLED_REGISTRY_USER} -p ${IBM_ENTITLED_REGISTRY_PASSWORD} cp.icr.io
        #   echo "buildah login -u "${IBM_ENTITLED_REGISTRY_USER}" -p "xxxxx" cp.icr.io"
        # fi
        # buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)
        


        # This script is based in the buildah.sh script that can be found in the 
        # mq-metrics-samples GitHub repository (https://github.com/ibm-messaging/mq-metric-samples)

        # This guide will use the prometheus agent.
        COLL="mq_prometheus"

        # Set some variables.
        # TODO: Generalize with token for MQ guide to be replaced by the bootstrap scripts
        ORG="github.com/ibm-prod-ref-guide"
        REPO="mq-metric-samples"
        VRMF=9.2.4.0
        db=`echo $COLL | sed "s/mq_//g"`
        #
        imgName="mq-metric-$db"
        imgNameRuntime=$imgName-runtime
        imgNameBuild=$imgName-build

        # # This is a convenient way to tidy up old images, espcially after experimenting
        # if [ "$1" = "CLEAN" ]
        # then
        #   buildah list -a -n | grep ubi-working-container | awk '{print $1}' | xargs buildah rm  2>/dev/null
        #   buildah list -a -n | grep ubi-minimal-working-container | awk '{print $1}' | xargs buildah rm  2>/dev/null
        #   buildah list -a -n | grep $imgName | awk '{print $1}' | xargs buildah rm  2>/dev/null
        #   buildah images -n  | grep $imgName | awk '{print $3}' | xargs buildah rmi 2>/dev/null
        #   buildah images
        #   buildah list
        #   exit 0
        # fi

        ###########################################################################
        # For normal operation, we start with a current UBI container. Unlike a
        # Dockerfile build, the scripted builds rerun every step each time. They do not
        # cache previous steps automatically.
        ###########################################################################
        buildCtr=$(buildah from registry.access.redhat.com/ubi8/ubi)

        # Install the Go package and a couple of other things. Failures here are going to be fatal
        # so we check that we were at least able to get started
        buildah run $buildCtr yum --disableplugin=subscription-manager -y install wget curl tar golang
        if [ $? -ne 0 ]
        then
        exit 1
        fi

        # Set up the environment that's going to be needed to download the correct
        # MQ client libraries and to strip out unneeded components from that package.
        buildah info
        buildah config --env genmqpkg_incnls=1 \
                      --env genmqpkg_incsdk=1 \
                      --env genmqpkg_inctls=1 \
                      --env RDURL="https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist" \
                      --env RDTAR="IBM-MQC-Redist-LinuxX64.tar.gz" \
                      --env VRMF="$VRMF" \
                      --env ORG="$ORG" \
                      --env REPO="$REPO" \
                        $buildCtr

        # Get the MQ redistributable client downloaded and installed. Use the genmqpkg command
        # to delete parts we don't need.
        
        